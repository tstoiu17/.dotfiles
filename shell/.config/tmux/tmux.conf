# {{{ OPTIONS 
set -g default-command  "${SHELL}"
set -g status-keys      emacs  # actually match vim command mode
set -s escape-time      10
set -g base-index       1  # start windows numbering at 1
set -g pane-base-index  1  # make pane numbering consistent with windows
set -g pane-border-indicators both  # make active pane more obvious
set -g renumber-windows on # renumber windows when a window is closed
set -g automatic-rename on # rename window to reflect current program
# enable true colour (Tc)
set -g  default-terminal   "$TERM"
set -ga terminal-overrides ",$TERM:Tc"
# start with mouse mode enabled
set -g mouse on
# instead of detaching when session is killed switch to last active session
set -g detach-on-destroy off
# }}}
# {{{ STYLE
set -g status-style                 "bg=default"
set -g status-justify               left
set -g status-position              bottom
set -g status-left                  "#[fg=cyan,bold][#[default]#S#[fg=cyan,bold]] #[bg=default]"
set -g status-left-length           30
set -g window-status-current-format "#[bg=#141414]#[fg=cyan,bold] #I#[fg=white]:#W#[fg=cyan] "
set -g window-status-format         " #[fg=cyan,dim]#I#[fg=white]:#W "
set -g status-right                 "#[fg=gray,dim,bold,italics]#{s|^$HOME|~|:pane_current_path}"
set -g status-right-length          90
set -g mode-style                   "fg=cyan,bg=#283457"
# }}}
# {{{ BINDS
# client action
bind -N "Go to last active session" -n M-^ switch-client -l
bind -N "Go to next session"        -n M-J switch-client -n
bind -N "Go to previous session"    -n M-K switch-client -p
bind -N "Detach the client"         -n M-D detach-client
# session action
bind -N "New session"          -n M-N new-session
bind -N "Kill the session"     -n M-Q kill-session
bind -N "Open session chooser" -n M-s choose-session -s
bind -N "Rename session"       -n M-< command-prompt -I "#S" "rename-session '%%'"
# pane actions
bind -N "Display pane numbers"                    -n M-d display-pane -d 5000
bind -N "Kill the active pane"                    -n M-w kill-pane
bind -N "Zoom the active pane"                    -n M-z resize-pane -Z
bind -N "Break the active pane into a new window" -n M-T break-pane
# window actions
bind -N "Kill the active window"                             -n M-W kill-window
bind -N "Open new window in the current pane path"           -n M-t new-window        -c '#{pane_current_path}'
bind -N "Open new vertical split in the current pane path"   -n M-v split-window   -h -c '#{pane_current_path}'
bind -N "Open new horizontal split in the current pane path" -n M-- split-window   -v -c '#{pane_current_path}'
bind -N "Rename window"                                      -n M-, command-prompt -I "#W" "rename-window '%%'"
bind -N "Toggle statusline"                                  -n M-B set            status
# navigation
bind -N "Go to next window"     -n M-L next-window
bind -N "Go to previous window" -n M-H previous-window
# bind -N "Select pane below"        -n M-j select-pane   -D
# bind -N "Select pane above"        -n M-k select-pane   -U
# bind -N "Select pane to the right" -n M-l select-pane   -R
# bind -N "Select pane to the left"  -n M-h select-pane   -L
bind -N "Select window 1"  -n M-1 select-window -t 1
bind -N "Select window 2"  -n M-2 select-window -t 2
bind -N "Select window 3"  -n M-3 select-window -t 3
bind -N "Select window 4"  -n M-4 select-window -t 4
bind -N "Select window 5"  -n M-5 select-window -t 5
bind -N "Select window 6"  -n M-6 select-window -t 6
bind -N "Select window 7"  -n M-7 select-window -t 7
bind -N "Select window 8"  -n M-8 select-window -t 8
bind -N "Select window 9"  -n M-9 select-window -t 9
bind -N "Select window 10" -n M-0 select-window -t 10
# open scripts
bind -N "Open lazygit popup"          -n M-g display-popup -d '#{pane_current_path}' -w100% -h100% -E lazygit
bind -N "Open tmux-sessionizer popup" -n M-S display-popup -d '#{pane_current_path}' -w70%  -h70%  -E tmux_sessionizer
# bind -N "Run tmux-dotfiles"           -n M-D run-shell tmux_dotfiles
bind -N "Source tmux config"          -n M-r source-file ~/.config/tmux/tmux.conf
# copy-mode
bind -N "Enter copy-mode"             -n M-[ copy-mode
bind -N "Enter command mode"          -n M-: command-prompt
bind -N "Exit copy-mode"  -T copy-mode-vi i send-keys -X cancel
bind -N "Begin selection" -T copy-mode-vi v send-keys -X begin-selection
bind -N "Copy selection"  -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -selection clipboard"
# }}}
# {{{ VIM INTEGRATION
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"
bind-key -n M-h if-shell "$is_vim" 'send-keys M-h' 'select-pane -L'
bind-key -n M-j if-shell "$is_vim" 'send-keys M-j' 'select-pane -D'
bind-key -n M-k if-shell "$is_vim" 'send-keys M-k' 'select-pane -U'
bind-key -n M-l if-shell "$is_vim" 'send-keys M-l' 'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
# if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
# if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi M-h select-pane -L
bind-key -T copy-mode-vi M-j select-pane -D
bind-key -T copy-mode-vi M-k select-pane -U
bind-key -T copy-mode-vi M-l select-pane -R
# bind-key -T copy-mode-vi M-\ select-pane -l
# }}}
# vim:tw=0
